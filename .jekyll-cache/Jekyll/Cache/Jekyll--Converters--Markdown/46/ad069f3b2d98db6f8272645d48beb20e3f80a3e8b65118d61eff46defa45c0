I"4H<p>Iâ€™ve been curious about the UI framework engineering opportunities of a minimal UI engine built in Rust and compiled into WASM. Iâ€™m going to document my journey here!</p>

<!--more-->

<h1 id="getting-started">Getting Started</h1>

<p>Using the <a href="https://rustwasm.github.io/docs/book/">Rust and WebAssembly</a> book</p>

<ol>
  <li>Install <code class="language-plaintext highlighter-rouge">rust-wasm</code>: <code class="language-plaintext highlighter-rouge">curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh</code></li>
  <li>Install <code class="language-plaintext highlighter-rouge">cargo-generate</code>: <code class="language-plaintext highlighter-rouge">cargo install cargo-generate</code></li>
  <li>Bootstrap an app: <code class="language-plaintext highlighter-rouge">cargo generate --git https://github.com/rustwasm/wasm-pack-template</code></li>
  <li>Build the bootstrapped app: <code class="language-plaintext highlighter-rouge">rust-wasm build</code></li>
  <li>Bootstrap a web app: <code class="language-plaintext highlighter-rouge">npm init wasm-app www</code> (see <a href="https://github.com/rustwasm/create-wasm-app">create-wasm-app</a>)</li>
  <li>Install dependencies (from www directory): <code class="language-plaintext highlighter-rouge">npm install</code></li>
  <li>Link WASM module: <code class="language-plaintext highlighter-rouge">npm link ../pkg</code>
8: Update index.js: <code class="language-plaintext highlighter-rouge">import * as wasm from "wasm-game-of-life";</code></li>
  <li>Start the dev server: <code class="language-plaintext highlighter-rouge">npm start</code></li>
</ol>

<h2 id="default-function-parameters">Default Function Parameters</h2>

<p><strong>Question:</strong> How do I add defaults to function parameters as you would in ES6: <code class="language-plaintext highlighter-rouge">function greet(name = 'User') {}</code>?</p>

<p><strong>Answer:</strong> Using <code class="language-plaintext highlighter-rouge">Option</code>: <a href="http://xion.io/post/code/rust-optional-args.html">xion</a> + <a href="https://github.com/rustwasm/wasm-bindgen/pull/507">wasm-bindgen</a></p>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">let</span> <span class="n">name</span> <span class="o">=</span> <span class="k">match</span> <span class="n">name</span> <span class="p">{</span>
        <span class="nb">None</span> <span class="k">=&gt;</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"User"</span><span class="p">),</span>
        <span class="nf">Some</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="n">x</span>
    <span class="p">};</span>
</code></pre></div></div>

<p>Even better (via <a href="https://8thlight.com/blog/uku-taht/2015/04/29/using-the-option-type-effectively.html">8thlight</a>) â€¦</p>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="nf">.unwrap_or</span><span class="p">(</span><span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"User"</span><span class="p">));</span>
</code></pre></div></div>

<h1 id="implement-game-of-life">Implement Game of Life</h1>

<p>Copy and Paste a bunch of code to <a href="https://rustwasm.github.io/docs/book/game-of-life/implementing.html">build the Game of Life</a>.</p>

<ul>
  <li>Question: Can I use the <a href="https://crates.io/crates/rand"><code class="language-plaintext highlighter-rouge">rand</code></a> crate instead of <a href="https://crates.io/crates/js-sys"><code class="language-plaintext highlighter-rouge">js-sys</code></a>?</li>
  <li>Answer:
Adding it will compile but bombs on the web with the folllowing error:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RuntimeError: "unreachable executed"
</code></pre></div>    </div>
    <p>Enabling the <code class="language-plaintext highlighter-rouge">wasm-bindgen</code> feature for the <code class="language-plaintext highlighter-rouge">rand</code> crate fixes that up!</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[dependencies.rand]
version = "0.7"
features = ["wasm-bindgen"]
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="adding-configurability">Adding configurability</h2>

<p>I was curious to add the ability to pass in the size and eventually a seed array for the game. My went a little too big for my first attempt and tried to use an optional struct and then default out both the struct and its members.</p>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[wasm_bindgen]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">UniverseOptions</span> <span class="p">{</span>
    <span class="n">width</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span>
    <span class="n">height</span><span class="p">:</span> <span class="nb">u32</span>
<span class="p">}</span>
<span class="nd">#[wasm_bindgen]</span>
<span class="k">impl</span> <span class="n">Universe</span> <span class="p">{</span>
    <span class="k">pub</span> <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">opts</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="n">UniverseOptions</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">Universe</span> <span class="p">{</span>
        <span class="c">// let UniverseOptions {width, height} = opts;</span>
        <span class="k">let</span> <span class="n">UniverseOptions</span> <span class="p">{</span><span class="n">width</span><span class="p">:</span> <span class="n">width_opt</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="n">height_opt</span><span class="p">}</span> <span class="o">=</span> <span class="n">opts</span><span class="nf">.unwrap_or</span><span class="p">(</span><span class="n">UniverseOptions</span> <span class="p">{</span>
            <span class="n">width</span><span class="p">:</span> <span class="nb">None</span><span class="p">,</span>
            <span class="n">height</span><span class="p">:</span> <span class="nb">None</span>
        <span class="p">});</span>
        <span class="k">let</span> <span class="n">width</span> <span class="o">=</span> <span class="n">width_opt</span><span class="nf">.unwrap_or</span><span class="p">(</span><span class="mi">64</span><span class="p">);</span>
        <span class="k">let</span> <span class="n">height</span> <span class="o">=</span> <span class="n">height_opt</span><span class="nf">.unwrap_or</span><span class="p">(</span><span class="mi">64</span><span class="p">);</span>
        <span class="o">...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">universe</span> <span class="o">=</span> <span class="nx">Universe</span><span class="p">.</span><span class="k">new</span><span class="p">({</span><span class="na">width</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="na">height</span><span class="p">:</span> <span class="mi">20</span><span class="p">});</span>
</code></pre></div></div>

<p>That compiled and ran but I was always seeing the default values so I reverted to a much simpler approach to validate it was possible.</p>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="nb">u32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">Universe</span> <span class="p">{</span>
    <span class="o">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>That worked fine so I started moving back towards my original goal. I tried to debug the execution in Firefox v68 and could step through the WASM code but I canâ€™t really read it except to see where it was defaulting to 64:</p>

<pre><code class="language-wasm">i32.const 64
</code></pre>

<p>I guessed that Rust and WASM was unable (at least with my current implementation) to convert my generic object to a <code class="language-plaintext highlighter-rouge">UniverseOptions</code> so I added a <code class="language-plaintext highlighter-rouge">new()</code> factory for it and (after adding <code class="language-plaintext highlighter-rouge">#[wasm_bindgen]</code> to the <code class="language-plaintext highlighter-rouge">impl</code>) invoked that from JS and had a working version! <span alt="tada icon">ðŸŽ‰</span></p>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[wasm_bindgen]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">UniverseOptions</span> <span class="p">{</span>
    <span class="n">width</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span>
    <span class="n">height</span><span class="p">:</span> <span class="nb">u32</span>
<span class="p">}</span>

<span class="nd">#[wasm_bindgen]</span>
<span class="k">impl</span> <span class="n">UniverseOptions</span> <span class="p">{</span>
    <span class="k">pub</span> <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="nb">u32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">UniverseOptions</span> <span class="p">{</span>
        <span class="n">UniverseOptions</span> <span class="p">{</span>
            <span class="n">width</span><span class="p">,</span>
            <span class="n">height</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nd">#[wasm_bindgen]</span>
<span class="k">impl</span> <span class="n">Universe</span> <span class="p">{</span>
    <span class="k">pub</span> <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">opts</span><span class="p">:</span> <span class="n">UniverseOptions</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">Universe</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">UniverseOptions</span> <span class="p">{</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">}</span> <span class="o">=</span> <span class="n">opts</span><span class="p">;</span>
        <span class="o">...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Universe</span><span class="p">,</span> <span class="nx">UniverseOptions</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">wasm-game-of-life</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">universe</span> <span class="o">=</span> <span class="nx">Universe</span><span class="p">.</span><span class="k">new</span><span class="p">(</span><span class="nx">UniverseOptions</span><span class="p">.</span><span class="k">new</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">));</span>
</code></pre></div></div>

<p>This finally got me back to my original implementation which supports:</p>
<ul>
  <li>Omitting <code class="language-plaintext highlighter-rouge">UniverseOptions</code>: <code class="language-plaintext highlighter-rouge">Universe.new()</code></li>
  <li>Omitting <code class="language-plaintext highlighter-rouge">height</code>: <code class="language-plaintext highlighter-rouge">Universe.new(UniverseOptions.new(32))</code></li>
  <li>Omitting <code class="language-plaintext highlighter-rouge">width</code>: <code class="language-plaintext highlighter-rouge">Universe.new(UniverseOptions.new(null, 32))</code></li>
</ul>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[wasm_bindgen]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">UniverseOptions</span> <span class="p">{</span>
    <span class="n">width</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">u32</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="n">height</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">u32</span><span class="o">&gt;</span>
<span class="p">}</span>

<span class="nd">#[wasm_bindgen]</span>
<span class="k">impl</span> <span class="n">UniverseOptions</span> <span class="p">{</span>
    <span class="k">pub</span> <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">u32</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">u32</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">UniverseOptions</span> <span class="p">{</span>
        <span class="n">UniverseOptions</span> <span class="p">{</span>
            <span class="n">width</span><span class="p">,</span>
            <span class="n">height</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nd">#[wasm_bindgen]</span>
<span class="k">impl</span> <span class="n">Universe</span> <span class="p">{</span>
    <span class="k">pub</span> <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">opts</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="n">UniverseOptions</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">Universe</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">UniverseOptions</span> <span class="p">{</span><span class="n">width</span><span class="p">:</span> <span class="n">width_opt</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="n">height_opt</span><span class="p">}</span> <span class="o">=</span> <span class="n">opts</span><span class="nf">.unwrap_or</span><span class="p">(</span><span class="n">UniverseOptions</span> <span class="p">{</span>
            <span class="n">width</span><span class="p">:</span> <span class="nb">None</span><span class="p">,</span>
            <span class="n">height</span><span class="p">:</span> <span class="nb">None</span>
        <span class="p">});</span>
        <span class="k">let</span> <span class="n">width</span> <span class="o">=</span> <span class="n">width_opt</span><span class="nf">.unwrap_or</span><span class="p">(</span><span class="mi">64</span><span class="p">);</span>
        <span class="k">let</span> <span class="n">height</span> <span class="o">=</span> <span class="n">height_opt</span><span class="nf">.unwrap_or</span><span class="p">(</span><span class="mi">64</span><span class="p">);</span>
        <span class="o">...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="bonus-width-or-size">Bonus: Width or Size</h2>

<p>One final exploration for today: when width is provided and height isnâ€™t, use width for both. This turned out to be pretty easy.</p>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[wasm_bindgen]</span>
<span class="k">impl</span> <span class="n">UniverseOptions</span> <span class="p">{</span>
    <span class="k">pub</span> <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">u32</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">u32</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">UniverseOptions</span> <span class="p">{</span>
        <span class="n">UniverseOptions</span> <span class="p">{</span>
            <span class="n">width</span><span class="p">,</span>
            <span class="n">height</span><span class="p">:</span> <span class="k">match</span> <span class="n">height</span> <span class="p">{</span>
                <span class="nb">None</span> <span class="k">=&gt;</span> <span class="n">width</span><span class="p">,</span>
                <span class="nf">Some</span><span class="p">(</span><span class="n">h</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="nf">Some</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>Iâ€™m guessing thereâ€™s a more efficient way to write that <code class="language-plaintext highlighter-rouge">match</code> but I havenâ€™t learned it so thisâ€™ll do for now!</p>
</blockquote>
:ET