I"õ<p><p>In<a href="http://blog.technisode.com/post/8155837364/enyo-daily-6-events-part-1"> Part 1 about Events</a> in enyo, I covered defining, triggering, and reacting to custom events for enyo Components.Â  The other source is DOM events triggered by user interactions or window changes.[[MORE]]</p>
<p>First off, here are the supported DOM events in enyo:</p>
<blockquote>
<p><strong>Document Events</strong><br />mousedown, mouseup, mouseover, mouseout, mousemove, click, dblclick, change, keydown, keyup, keypress, input</p>
<p><strong>Window Events</strong><br />resize, load, unload</p>
</blockquote>
<p>There are two phases to DOM event handling in enyo:Â  capture and bubble.Â  The capture phase starts with the eldest ancestor, calls captureDomEvent (if found), and continues downt the hierarchy until a captureDomEvent call returns true or reaches the source Control of the event.</p>
<p>If nothing captures the event, it's passed to the bubble phase.Â  This phase traverses the opposite direction -- from node to parent.Â  Again, if an event handler (dispatchDomEvent in the bubble phase) returns true, the phase stops; otherwise it continues until it reaches the top of the DOM tree.Â  Also, if stopPropagation() is called on the event object, the phase will end as well.</p>
<p>Unlike the capture phase where you must implement captureDomEvent to handle the event, enyo.Component implements dispatchDomEvent and provides some basic routing.Â  It first looks for a method matching the signature eventtypeHandler (e.g. clickHandler).Â  If not found, it will look for an oneventtype (e.g. onclick) declaration and dispatch the event to it.Â  Note that these handlers are mutually exclusive; if the first is found, the second will not be called.</p>
<p>Below is a slightly expanded example from the previous part that includes DOM event capturing and bubbling.Â  If you try this code out, you can add different return values to see when events are stopped in each phase.</p>
<blockquote>
<p>var _Example = {<br />Â Â Â  name:"com.technisode.example.App",<br />Â Â Â  kind:"Control",<br />Â Â Â  components:[<br />Â Â Â  Â Â Â  {kind:"EventSender", name:"eventSender", onSend:"sent"},<br />Â Â Â  Â Â Â  {kind:"Button", onclick:"clicked"},<br />Â Â Â  Â Â Â  {kind:"Input", onkeypress:"press"}<br />Â Â Â  ],<br />Â Â Â  captureDomEvent:function(e) {<br />Â Â Â  Â Â Â  enyo.log("A DOM event occured", e.type);<br />Â Â Â  Â Â Â  <br />Â Â Â  Â Â Â  // returning true would indicated the event is captured and prevent the bubble phase<br />Â Â Â  Â Â Â  // thereby preventing the declared handlers (clicked in this case) from being called<br />Â Â Â  Â Â Â  <br />Â Â Â  Â Â Â  // returning false (or no explicit return) lets things continue<br />Â Â Â  Â Â Â  return false;<br />Â Â Â  },<br />Â Â Â  dispatchDomEvent:function(e) {<br />Â Â Â  Â Â Â  // like any other method, you could override dispatchDomEvent and implement custom routing<br />Â Â Â  Â Â Â  e.myCustomField = "This is a custom field";<br />Â Â Â  Â Â Â  <br />Â Â Â  Â Â Â  return this.inherited(arguments);<br />Â Â Â  },<br />Â Â Â  press:function(source, event) {<br />Â Â Â  Â Â Â  enyo.log(source, event);<br />Â Â Â  },<br />Â Â Â  clickHandler:function(source, event) {<br />Â Â Â  Â Â Â  enyo.log("bubbled up to me", event.myCustomField);<br />Â Â Â  Â Â Â  <br />Â Â Â  Â Â Â  // calling event.stopPropagation() or returning true will end the bubble phase<br />Â Â Â  },<br />Â Â Â  clicked:function(source, event) {<br />Â Â Â  Â Â Â  // trigger my custom events<br />Â Â Â  Â Â Â  this.$.eventSender.go();<br />Â Â Â  Â Â Â  <br />Â Â Â  Â Â Â  // toggles event handler between send and secondSent ... just because ...<br />Â Â Â  Â Â Â  this.$.eventSender.onSend = (this.$.eventSender.onSend === "sent") ? "secondSent" : "sent";<br />Â Â Â  Â Â Â  <br />Â Â Â  Â Â Â  // calling event.stopPropagation() or returning true will end the bubble phase<br />Â Â Â  },<br />Â Â Â  sent:function(source, one, two, three) {<br />Â Â Â  Â Â Â  enyo.log("sent", one, two, three)<br />Â Â Â  },<br />Â Â Â  handleOnAlert:function(source, obj) {<br />Â Â Â  Â Â Â  enyo.log("alerted", enyo.json.stringify(obj));<br />Â Â Â  },<br />Â Â Â  secondSent:function(source, one, two, three) {<br />Â Â Â  Â Â Â  enyo.log("secondSent handles onSend now", one, two, three)<br />Â Â Â  }<br />}<br /><br />var _EventSender = {<br />Â Â Â  name:"EventSender",<br />Â Â Â  kind:"Component",<br />Â Â Â  events:{ <br />Â Â Â  Â Â Â  onSend:"handleOnSend",<br />Â Â Â  Â Â Â  onAlert:{value:"handleOnAlert", caller:"sendAlert"}<br />Â Â Â  },<br />Â Â Â  go:function() {<br />Â Â Â  Â Â Â  this.doSend(1,2,3);Â Â Â  // dispatchIndirectly<br />Â Â Â  Â Â Â  this.sendAlert({a:1, b:2});<br />Â Â Â  }<br />}<br /><br />enyo.kind(_EventSender);<br />enyo.kind(_Example);</p>
</blockquote></p>
:ET