I"ï#<blockquote>
  <p>Originally posted on Code Mentor: https://www.codementor.io/ryan286/passing-functions-as-react-props-9fimj8ikv</p>
</blockquote>

<p>I recently had a discussion with a coworker about the naming of a function property that will be passed to a React component. It got me thinking more thoroughly about the role of functions as properties. I find that they usually fall into one of two camps. The function either:</p>

<ul>
  <li>Notifies the container of user or component action, or</li>
  <li>Provides some capability that the component needs.</li>
</ul>

<!--more-->

<h2 id="event-callbacks">Event Callbacks</h2>

<p>Let‚Äôs call the first an ‚ÄúEvent Callback.‚Äù This lines up well with the native event hooks provided by React. You, the component author, can provide a function (<code class="language-plaintext highlighter-rouge">this.handleClick</code>) via the prop (<code class="language-plaintext highlighter-rouge">onClick</code>) of your <code class="language-plaintext highlighter-rouge">&lt;button&gt;</code> component like so:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">MyComponent</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">ev</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">===</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Enter!</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="nx">render</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span><span class="p">}</span><span class="o">&gt;</span>
            	<span class="nx">Click</span> <span class="nx">it</span> <span class="nx">real</span> <span class="nx">good</span>
            <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If <code class="language-plaintext highlighter-rouge">&lt;button&gt;</code> was a ‚Äúregular‚Äù React component, you might expect it to have a <code class="language-plaintext highlighter-rouge">propType</code> defined that will declare that <code class="language-plaintext highlighter-rouge">onClick</code> expect a function.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">onClick</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span>
</code></pre></div></div>

<p>What this means, intuitively, is that <code class="language-plaintext highlighter-rouge">&lt;button&gt;</code> accepts a function in the <code class="language-plaintext highlighter-rouge">onClick</code> prop, which will be called when the button is clicked. It doesn‚Äôt, however, imply what it ‚Äúmeans‚Äù to click the button. Does it submit a form? select an option? play a <a href="https://twitter.com/sarahjorden_/status/877005793492692992">ninja cat video</a>? That responsibility lies within the <strong>container</strong> and is the defining characteristic of an Event Callback:</p>

<blockquote>
  <p>With an Event Callback, a component is responsible for notifying the container that a user or component action has occurred, but not what the result of that action should be.</p>
</blockquote>

<h2 id="dependency-injection">Dependency Injection</h2>

<p>Sometimes, a component either requires a feature be implemented by its container or allows for its container to override a feature‚Äôs default behavior.</p>

<p>An example of this comes from the popular <a href="https://www.npmjs.com/package/react-router"><code class="language-plaintext highlighter-rouge">react-router</code></a> package.</p>

<p><a href="https://reacttraining.com/react-router/web/api/NavLink/isActive-func"><code class="language-plaintext highlighter-rouge">NavLink#isActive</code></a> accepts a function as a prop, which is used by the component to override the default behavior of marking a link active if it matches the current URL‚Äôs pathname.</p>

<p>Here‚Äôs an example lifted directly from the package docs:x`</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// only consider an event active if its event id is an odd number</span>
<span class="kd">const</span> <span class="nx">oddEvent</span> <span class="o">=</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">location</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">match</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">false</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">eventID</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">match</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">eventID</span><span class="p">)</span>
  <span class="k">return</span> <span class="o">!</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">eventID</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">eventID</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">1</span>
<span class="p">}</span>

<span class="o">&lt;</span><span class="nx">NavLink</span>
  <span class="nx">to</span><span class="o">=</span><span class="dl">"</span><span class="s2">/events/123</span><span class="dl">"</span>
  <span class="nx">isActive</span><span class="o">=</span><span class="p">{</span><span class="nx">oddEvent</span><span class="p">}</span>
<span class="o">&gt;</span><span class="nx">Event</span> <span class="mi">123</span><span class="o">&lt;</span><span class="sr">/NavLink</span><span class="err">&gt;
</span></code></pre></div></div>

<p>In this example, the container doesn‚Äôt need to be notified of anything; instead, it is injecting a new, custom behavior.</p>

<blockquote>
  <p>With Dependency Injection, the component is responsible for describing the contract for the feature (via the function‚Äôs interface). The container will provide the feature.</p>
</blockquote>

<h2 id="implementation-differences">Implementation Differences</h2>

<p>A consistent API makes for a predictable API, which improves the overall developer experience. Below are a few implementation best practices for each type of function that leads to consistent components and happy consumers!</p>

<p>Event Callbacks should be:</p>
<ul>
  <li><strong>Optional:</strong> There are exceptions, but normally should be at the discretion of the consumer to handle an event</li>
  <li><strong>Named consistently:</strong> Prefix all event callbacks with <em><code class="language-plaintext highlighter-rouge">on</code></em>, e.g. <code class="language-plaintext highlighter-rouge">onSelectThing</code></li>
  <li><strong>Single argument:</strong> Pass an object argument with relevant data for the event, e.g. <code class="language-plaintext highlighter-rouge">onSelectThing({index: 1})</code></li>
  <li><strong>Unidirectional:</strong> Only pass data via the callback and not rely on a return value from the callback</li>
</ul>

<p>Dependency Injection functions should be:</p>
<ul>
  <li><strong>Unidirectional:</strong> Only pass behavior into a component and not expect feedback from the function (or its parameters!)</li>
  <li><strong>Named appropriately:</strong> often beginning with a verb, e.g. <code class="language-plaintext highlighter-rouge">isActive</code> or <code class="language-plaintext highlighter-rouge">generateId</code></li>
</ul>

<h2 id="wrap-up">Wrap Up</h2>

<p>Hopefully this post helps you make consistent decisions when accepting functions as a prop to your React components. Have you encountered other use cases for functions as props? Do you disagree with the best practices above or have other recommendations? Please comment below :)</p>
:ET