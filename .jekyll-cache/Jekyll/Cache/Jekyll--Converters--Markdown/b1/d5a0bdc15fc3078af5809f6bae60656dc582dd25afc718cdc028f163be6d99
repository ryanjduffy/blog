I"7 <p><p>There are several use cases for including large blocks of content into your applications.  A couple common scenarios are to include a basic help system or "About" information.  I'll cover three possible ways to do this today.[[MORE]]</p>
<p>Here's the HTML I'll use for illustration.  Note that it doesn't include any enyo kinds, only raw HTML.  If you want to include enyo, these solutions won't work for you.</p>
<blockquote>
<p>&lt;div class="help"&gt;<br />  &lt;div class="topic"&gt;Getting Started&lt;/div&gt;<br />  &lt;div class="content"&gt;<br />    Here is a quick introduction to imported html into you enyo applications.  You can include &lt;a href="http://developer.palm.com"&gt;links to external resources&lt;/a&gt; or other random markup as you need.  Normally, you'd have much more content but this will do for illustration.<br />  &lt;/div&gt;<br />&lt;/div&gt;</p>
</blockquote>
<p>The simplest solution for small blocks of content is the content property from <a href="https://developer.palm.com/content/api/reference/enyo/enyo-api-reference.html#enyo.Control" target="_blank">Control </a>(technically <a href="https://developer.palm.com/content/api/reference/enyo/enyo-api-reference.html#enyo.DomNodeBuilder" target="_blank">DomNodeBuilder</a>) and its children.  Since it's a published property, you can interact with it in the same way as any other property -- either declaratively in the component definition or programmatically via setContent().  You can specify any valid HTML for content and it will be included as the innerHTML of the node.  One caveat here is that HTML is escaped by default; to include the raw HTML, set the allowHtml property to true.</p>
<blockquote>
<p>{content:<br />'&lt;div class="help"&gt;' +<br />'  &lt;div class="topic"&gt;Getting Started&lt;/div&gt;' +<br />'  &lt;div class="content"&gt;' +<br />'    Here is a quick introduction to imported html into you enyo applications.  You can include &lt;a href="http://developer.palm.com"&gt;links to external resources&lt;/a&gt; or other random markup as you need.  Normally, you'd have much more content but this will do for illustration.' +<br />'  &lt;/div&gt;' +<br />'&lt;/div&gt;'}</p>
</blockquote>
<p>That reasonably supportable for that length of text.  If, however, you had 10 topics, your enyo code would become untenable.  If the text is relatively static, at least static for a particular version of your application, the <a href="https://developer.palm.com/content/api/reference/enyo/enyo-api-reference.html#base/controls/HtmlContent.js" target="_blank">HtmlContent </a>kind might be a good fit.</p>
<p>HtmlContent allows you to specify content inside your HTML document (as opposed to the JavaScript document containing your enyo components).  The content is referenced by specifying the id of the node wrapping it in the srcId property of HtmlContent.  One nice feature of HtmlContent you don't get in the other options is a special event handler for links.  So, in addition to "regular" links, you can encode special instructions in the href attribute of anchor tags to execute unique actions.</p>
<p>index.html</p>
<blockquote>
<p>&lt;!doctype html&gt;<br />&lt;html&gt;<br />&lt;head&gt;<br />    &lt;title&gt;technisode example app&lt;/title&gt;<br />    &lt;script src="/dev/enyo/1.0/framework/enyo.js" type="text/javascript"&gt;&lt;/script&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&lt;div id="helpContent"&gt;<br />    &lt;div class="help"&gt;<br />      &lt;div class="topic"&gt;Getting Started&lt;/div&gt;<br />      &lt;div class="content"&gt;<br />        Here is a quick introduction to imported html into you enyo applications.  You can include &lt;a href="http://developer.palm.com"&gt;links to external resources&lt;/a&gt; or other random markup as you need.  Normally, you'd have much more content but this will do for illustration.<br />      &lt;/div&gt;<br />    &lt;/div&gt;<br />&lt;/div&gt;<br />&lt;script type="text/javascript"&gt;<br />    new com.technisode.example.App().renderInto(document.body);<br />&lt;/script&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;</p>
</blockquote>
<p>javascript</p>
<blockquote>
<p>{kind:"HtmlContent", srcId:"helpContent", onLinkClick:"linkClicked"},</p>
</blockquote>
<p>The third option is <a href="https://developer.palm.com/content/api/reference/enyo/enyo-api-reference.html#enyo.AjaxContent" target="_blank">AjaxContent</a>.  It functions similar to HtmlContent except that it loads the content asynchronously from an external file -- either remotely or locally.  With both the content property and the HtmlContent control, the DOM nodes are available as soon as they are created.  <del>With AjaxContent, the nodes aren't available until the onContentChanged event fires.</del>  Turns out that the DOM nodes aren't quite ready when onContentChanged fires; it fires 1 line earlier.  I assume the reason is to allow you to modify the content before it is inserted.  Regardless, if you want to find or traverse the HTML using DOM methods, you can't do so quite yet.</p>
<p>A simple solution is to wrap any DOM manipulation calls in an enyo.asynchMethod.  This will allow the current call stack to complete which includes inserting the content.  This method is illustrated in the complete example below.</p>
<blockquote>
<p>{kind:"AjaxContent", name:"ajaxContent", allowHtml:true, url:"http://www.technisode.com/blog/helpContent.html", onContentChanged:"ajaxContentChanged"}</p>
</blockquote>
<p>And finally, all together now ...</p>
<p>index.html</p>
<blockquote>
<p>&lt;!doctype html&gt;<br />&lt;html&gt;<br />&lt;head&gt;<br />    &lt;title&gt;technisode example app&lt;/title&gt;<br />    &lt;script src="/dev/enyo/1.0/framework/enyo.js" type="text/javascript"&gt;&lt;/script&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&lt;div id="helpContent"&gt;<br />    &lt;div class="help"&gt;<br />      &lt;div class="topic"&gt;Getting Started&lt;/div&gt;<br />      &lt;div class="content"&gt;<br />        Here is a quick introduction to imported html into you enyo applications.  You can include &lt;a href="http://developer.palm.com"&gt;links to external resources&lt;/a&gt; or other random markup as you need.  Normally, you'd have much more content but this will do for illustration.<br />      &lt;/div&gt;<br />    &lt;/div&gt;<br />&lt;/div&gt;<br />&lt;script type="text/javascript"&gt;<br />    new com.technisode.example.App().renderInto(document.body);<br />&lt;/script&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;</p>
</blockquote>
<p>content.js</p>
<blockquote>
<p>var _Example = {<br />    name:"com.technisode.example.App",<br />    kind:"Control",<br />    components:[<br />        {content:<br />            '&lt;div class="help"&gt;' +<br />            '  &lt;div class="topic"&gt;Getting Started&lt;/div&gt;' +<br />            '  &lt;div class="content"&gt;' +<br />            '    Here is a quick introduction to imported html into you enyo applications.  You can include &lt;a href="http://developer.palm.com"&gt;links to external resources&lt;/a&gt; or other random markup as you need.  Normally, you\'d have much more content but this will do for illustration.' +<br />            '  &lt;/div&gt;' +<br />            '&lt;/div&gt;'},<br />        {kind:"HtmlContent", srcId:"helpContent", onLinkClick:"linkClicked"},<br />        {kind:"AjaxContent", name:"ajaxContent", allowHtml:true, url:"http://www.technisode.com/blog/helpContent.html", onContentChanged:"ajaxContentChanged"}<br />    ],<br />    linkClicked:function(sender, url) {<br />        // simple pass-through<br />        window.open(url);<br />    },<br />    ajaxContentChanged:function(sender) {<br />        enyo.asyncMethod(this, function() {<br />            enyo.log("loading complete.  feel free to manipulate the content now", sender.content);<br />            sender.hasNode().querySelectorAll(".topic");  // for example<br />        });<br />    }<br />}<br /><br />enyo.kind(_Example);</p>
</blockquote></p>
:ET