I"<p><p>A question came up on the forums regarding global custom events.  The use case described was the need to pass an event up or down the object hierarchy just to react to it at the appropriate level.  Enyo actually can support this with the current architecture using its event dispatcher and it only requires a couple lines of code to implement.[[MORE]]</p>
<p>To fire the event, use window.enyo.dispatch(eventObject). eventObject must define a type member.</p>
<blockquote>
<p>window.enyo.dispatch({type:"customGlobalEvent", data:"something to pass"});</p>
</blockquote>
<p>To catch the event, add your control to the rootHandler's listeners and implement a xxxHandler method for the event.</p>
<blockquote>
<p>create:function() {<br />  this.inherited(arguments);<br />  enyo.dispatcher.rootHandler.addListener(this);<br />},<br />customGlobalEventHandler:function(sender, param) {<br />  enyo.log("customGlobalEvent", param.data);  // logs: customGlobalEvent something to pass<br />}</p>
</blockquote>
<p>Here it is in action in my continuing events example:</p>
<blockquote>
<p>var _Example = {<br />    name:"com.technisode.example.App",<br />    kind:"Control",<br />    components:[<br />        {kind:"ApplicationEvents", name:"appEvents"},<br />        {kind:"EventSender", name:"eventSender", onSend:"sent"},<br />        {kind:"Button", onclick:"clicked"},<br />        {kind:"Input", onkeypress:"press"}<br />    ],<br />    create:function() {<br />        this.inherited(arguments);<br />        <br />        // map all ApplicationEvents to logAppEvent<br />        var ae = this.$.appEvents;<br />        Object.keys(enyo.ApplicationEvents.prototype.events).forEach(function(key) {<br />            //enyo.log("setting handler for ",key);<br />            ae[key] = "logAppEvent";<br />        });<br />        <br />        enyo.dispatcher.rootHandler.addListener(this);<br />    },<br />    logAppEvent:function(source, e) {<br />        enyo.log("logAppEvent",e.type);<br />    },<br />    resizeHandler:function() {<br />        enyo.log("dimensions",window.document.body.offsetWidth,window.document.body.offsetHeight);<br />    },<br />    captureDomEvent:function(e) {<br />        enyo.log("A DOM event occured", e.type);<br />        <br />        // returning true would indicated the event is captured and prevent the bubble phase<br />        // thereby preventing the declared handlers (clicked in this case) from being called<br />        <br />        // returning false (or no explicit return) lets things continue<br />        return false;<br />    },<br />    dispatchDomEvent:function(e) {<br />        // like any other method, you could override dispatchDomEvent and implement custom routing<br />        e.myCustomField = "This is a custom field";<br />        <br />        return this.inherited(arguments);<br />    },<br />    press:function(source, event) {<br />        enyo.log(source, event);<br />    },<br />    clickHandler:function(source, event) {<br />        enyo.log("bubbled up to me", event.myCustomField);<br />        <br />        // calling event.stopPropagation() or returning true will end the bubble phase<br />    },<br />    clicked:function(source, event) {<br />        // trigger my custom events<br />        this.$.eventSender.go();<br />        <br />        // toggles event handler between send and secondSent ... just because ...<br />        this.$.eventSender.onSend = (this.$.eventSender.onSend === "sent") ? "secondSent" : "sent";<br />        <br />        // calling event.stopPropagation() or returning true will end the bubble phase<br />    },<br />    sent:function(source, one, two, three) {<br />        enyo.log("sent", one, two, three)<br />    },<br />    handleOnAlert:function(source, obj) {<br />        enyo.log("alerted", enyo.json.stringify(obj));<br />    },<br />    secondSent:function(source, one, two, three) {<br />        enyo.log("secondSent handles onSend now", one, two, three)<br />    },<br />    customGlobalEventHandler:function(sender, param) {<br />        enyo.log("customGlobalEvent", param.data);<br />    }<br />}<br /><br />var _EventSender = {<br />    name:"EventSender",<br />    kind:"Component",<br />    events:{ <br />        onSend:"handleOnSend",<br />        onAlert:{value:"handleOnAlert", caller:"sendAlert"}<br />    },<br />    create:function() {<br />        this.inherited(arguments);<br />        <br />        enyo.dispatcher.rootHandler.addListener(this);<br />    },<br />    go:function() {<br />        this.doSend(1,2,3);    // dispatchIndirectly<br />        this.sendAlert({a:1, b:2});<br />        window.enyo.dispatch({type:"customGlobalEvent", data:"something to pass"});<br />    },<br />    customGlobalEventHandler:function(sender, e) {<br />        enyo.log("also caught customGlobalEvent");<br />    }<br />}<br /><br />enyo.kind(_EventSender);<br />enyo.kind(_Example);</p>
</blockquote></p>
:ET