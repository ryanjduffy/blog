I"•<p><p>In the exciting finale on events in enyo, I'll cover the <a href="https://developer.palm.com/content/api/reference/enyo/enyo-api-reference.html#enyo.ApplicationEvents" target="_blank">ApplicationEvents</a> component.Â  This built-in component handles the three window events (onload, onunload, and resize) as well as a host of webOS specific events.</p>
<p><em>For more background on events, check out <a href="http://blog.technisode.com/post/8155837364/enyo-daily-6-events-part-1">Part 1 on custom events</a> and <a href="http://blog.technisode.com/post/8203888586/enyo-daily-7-events-part-2">Part 2 on DOM events</a>.</em></p>
<p><em>[[MORE]]</em>The ApplicationEvents component is really just a convenience control.Â  It contains virtually no logic.Â  Instead it simply overrides dispatchDomEvent (<a href="http://blog.technisode.com/post/8203888586/enyo-daily-7-events-part-2">see Part 2 for details</a> on this method) and fires its custom events instead.Â  Not to say there isn't value using it; it's preferable to declaratively bind a handler via a component versus programmatically checking the event type in dispatchDomEvent.Â  It alsoÂ  (hopefully) insulates the developer for changes to the underlying event model.Â  For example, if HP decided to change an event type, ApplicationEvents would be able to handle that scenario and fire its original event.</p>
<p>Because there isn't anything to ApplicationEvents, I won't spend much time discussing its features.Â  One notable event is onWindowRotated.</p>
<p>As you would expect, this is fired when you rotate the device (or emulator via keystrokes).Â  Under the covers, this event is really just a translation of the window resize event (Search for enyo.sendOrientationChange in the enyo source to see what's going on).Â  You'd think that you'd be able to simulate rotation in the browser by reszing the window.Â  Unfortunately, there's check for changes to PalmSystem.screenOrientation (which I assume is set by Palm's customized WebKit since it isn't referenced elsewhere in source) so windowRotated never fires in the browser.</p>
<p>If you want to test how your display will scale when changing from portrait to landscape, you can add a resizeHandler method to your component (<a href="http://blog.technisode.com/post/8203888586/enyo-daily-7-events-part-2">check out Part 2</a> for an explanation why you don't have to specifically listen for resize for resizeHandler to be called).Â  If, however, you need to test for a specific orientation, you'll have to use the emulator.</p>
<p>Here's the complete example incorporating all three types of events.</p>
<blockquote>
<p>var _Example = {<br />Â Â Â  name:"com.technisode.example.App",<br />Â Â Â  kind:"Control",<br />Â Â Â  components:[<br />Â Â Â  Â Â Â  {kind:"ApplicationEvents", name:"appEvents"},<br />Â Â Â  Â Â Â  {kind:"EventSender", name:"eventSender", onSend:"sent"},<br />Â Â Â  Â Â Â  {kind:"Button", onclick:"clicked"},<br />Â Â Â  Â Â Â  {kind:"Input", onkeypress:"press"}<br />Â Â Â  ],<br />Â Â Â  create:function() {<br />Â Â Â  Â Â Â  this.inherited(arguments);<br />Â Â Â  Â Â Â  <br />Â Â Â  Â Â Â  // map all ApplicationEvents to logAppEvent<br />Â Â Â  Â Â Â  var ae = this.$.appEvents;<br />Â Â Â  Â Â Â  Object.keys(enyo.ApplicationEvents.prototype.events).forEach(function(key) {<br />Â Â Â  Â Â Â  Â Â Â  enyo.log("setting handler for ",key);<br />Â Â Â  Â Â Â  Â Â Â  ae[key] = "logAppEvent";<br />Â Â Â  Â Â Â  })<br />Â Â Â  },<br />Â Â Â  logAppEvent:function(source, e) {<br />Â Â Â  Â Â Â  enyo.log("logAppEvent",e.type);<br />Â Â Â  },<br />Â Â Â  resizeHandler:function() {<br />Â Â Â  Â Â Â  enyo.log("dimensions",window.document.body.offsetWidth,window.document.body.offsetHeight);<br />Â Â Â  },<br />Â Â Â  captureDomEvent:function(e) {<br />Â Â Â  Â Â Â  enyo.log("A DOM event occured", e.type);<br />Â Â Â  Â Â Â  <br />Â Â Â  Â Â Â  // returning true would indicated the event is captured and prevent the bubble phase<br />Â Â Â  Â Â Â  // thereby preventing the declared handlers (clicked in this case) from being called<br />Â Â Â  Â Â Â  <br />Â Â Â  Â Â Â  // returning false (or no explicit return) lets things continue<br />Â Â Â  Â Â Â  return false;<br />Â Â Â  },<br />Â Â Â  dispatchDomEvent:function(e) {<br />Â Â Â  Â Â Â  // like any other method, you could override dispatchDomEvent and implement custom routing<br />Â Â Â  Â Â Â  e.myCustomField = "This is a custom field";<br />Â Â Â  Â Â Â  <br />Â Â Â  Â Â Â  return this.inherited(arguments);<br />Â Â Â  },<br />Â Â Â  press:function(source, event) {<br />Â Â Â  Â Â Â  enyo.log(source, event);<br />Â Â Â  },<br />Â Â Â  clickHandler:function(source, event) {<br />Â Â Â  Â Â Â  enyo.log("bubbled up to me", event.myCustomField);<br />Â Â Â  Â Â Â  <br />Â Â Â  Â Â Â  // calling event.stopPropagation() or returning true will end the bubble phase<br />Â Â Â  },<br />Â Â Â  clicked:function(source, event) {<br />Â Â Â  Â Â Â  // trigger my custom events<br />Â Â Â  Â Â Â  this.$.eventSender.go();<br />Â Â Â  Â Â Â  <br />Â Â Â  Â Â Â  // toggles event handler between send and secondSent ... just because ...<br />Â Â Â  Â Â Â  this.$.eventSender.onSend = (this.$.eventSender.onSend === "sent") ? "secondSent" : "sent";<br />Â Â Â  Â Â Â  <br />Â Â Â  Â Â Â  // calling event.stopPropagation() or returning true will end the bubble phase<br />Â Â Â  },<br />Â Â Â  sent:function(source, one, two, three) {<br />Â Â Â  Â Â Â  enyo.log("sent", one, two, three)<br />Â Â Â  },<br />Â Â Â  handleOnAlert:function(source, obj) {<br />Â Â Â  Â Â Â  enyo.log("alerted", enyo.json.stringify(obj));<br />Â Â Â  },<br />Â Â Â  secondSent:function(source, one, two, three) {<br />Â Â Â  Â Â Â  enyo.log("secondSent handles onSend now", one, two, three)<br />Â Â Â  }<br />}<br /><br />var _EventSender = {<br />Â Â Â  name:"EventSender",<br />Â Â Â  kind:"Component",<br />Â Â Â  events:{ <br />Â Â Â  Â Â Â  onSend:"handleOnSend",<br />Â Â Â  Â Â Â  onAlert:{value:"handleOnAlert", caller:"sendAlert"}<br />Â Â Â  },<br />Â Â Â  go:function() {<br />Â Â Â  Â Â Â  this.doSend(1,2,3);Â Â Â  // dispatchIndirectly<br />Â Â Â  Â Â Â  this.sendAlert({a:1, b:2});<br />Â Â Â  }<br />}<br /><br />enyo.kind(_EventSender);<br />enyo.kind(_Example);</p>
</blockquote></p>
:ET